from datetime import datetime, timedelta
from aiogram.utils import executor
from createbot import dp, bot
from database import sqlite_db
from handlers import *
from aiogram.utils.emoji import emojize
from googletable.gtable import GoogleSheet
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import aioschedule
import logging

logging.basicConfig(filename='logging.log',
					level=logging.INFO,
					format="%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s"
					)
log = logging.getLogger("ex")

try:
	raise RuntimeError
except Exception:
	log.info('INFO')
	log.error('ERROR!!')
	log.debug('DEBUG')

gs = GoogleSheet()
range_sheet = 'Clients!A2:G'
	
async def on_startup(_):
	print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω')
	await bot.send_message(chat_id=admin.ADMIN_ID, text=emojize('–Ø –æ–Ω–ª–∞–π–Ω, –∏ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å :wink: /start'))
	sqlite_db.sql_start()
	asyncio.create_task(loop_schedule())

async def reminder_client():
	try:
		read = gs.read_sheet(range_sheet)
		date_now = (datetime.now() + timedelta(1)).strftime('%d.%m.%Y')
		for id_chat in range(0, len(read), 1):
			if date_now == read[id_chat][2]:
				await bot.send_message(chat_id=read[id_chat][6], text=emojize(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞—é\n–ó–∞–≤—Ç—Ä–∞ –≤—ã :pencil2: –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏—é Hygge \n–í—Ä–µ–º—è:  {read[id_chat][3]}'))
	except Exception as ex:
		print(ex)

async def feed_back():
	try:
		read = gs.read_sheet(range_sheet)
		date_now = (datetime.now() + timedelta(-1)).strftime('%d.%m.%Y')
		for id_chat in range(0, len(read), 1):
			if date_now == read[id_chat][2]:
				await bot.send_message(chat_id=read[id_chat][6], 
										text=emojize(f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!\
													\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É\
													\n–ó–∞ –æ—Ç–≤–µ—Ç —Å–∫–∏–¥–∫–∞ 5% –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µüíö)'), 
										reply_markup=InlineKeyboardMarkup(row_width=1).\
										insert(InlineKeyboardButton(text=emojize(':blush: –©–∞—Å –∫–∞–∫ –Ω–∞–ø–∏—à—É –í–∞–º –æ—Ç–∑—ã–≤! :kissing_heart:'), callback_data='feed_back_yes')).\
										insert(InlineKeyboardButton(text=emojize(':rage: –ù–µ—Ö–æ—á—É –ø–∏—Å–∞—Ç—å, –≤—ã –≤–æ–Ω—é—á–∫–∏ :shit:'), callback_data='feed_back_no'))
										)
										
	except Exception as ex:
		print(ex)

async def loop_schedule():
	try:
		aioschedule.every().day.at("14:00").do(reminder_client)
		aioschedule.every().day.at("12:10").do(feed_back)
		while True:
			await aioschedule.run_pending()
			await asyncio.sleep(1)
	except Exception as ex:
		print(ex)

admin.register_handlers_admin(dp)
client.register_handlers_client(dp)
# admin.register_handlers_admin(dp)
other.register_handlers_other(dp)

executor.start_polling(dp, skip_updates=True, on_startup=on_startup)